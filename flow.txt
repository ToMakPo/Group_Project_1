To merge what we were thinking for network gameplay with how local-multiplay
or single-player would work, I wanted to go over the host/player interactions
to consider how the flow would go so that the host logic could be run within
the same browser as the local player(s).

thinking from the multiplayer perspective:

1 ) Player lands on the site. They choose to host and type in the group name if 
     they choose to play multi-online (in these steps - THEY DO).
2 ) Host chooses the game options - difficulty, # rounds.
3 ) Other players NAV to the site.  They choose to play along with the online
     group and submit the host name they're playing on (if online multiplayer) 
     and their own name
4 ) For each round:
5 )  The trivia question is presented to each player
6 )  each player submits a lie-answer
7 )  the host sends each player a list of possible answers including the REAL
      answer together with the lie answers from all the other players and asks
      them to try to guess the real answer
8 )  each player submits which answer they think is correct from the ordered 
      list.  They send the host index [0-3?]
9 )  The Host tells each player if they were correct and the point winnings
      for the round including who picked THEIR LIE (if anyone did) and a running
      tally of points so far for all the players.
10) once the final round is done, the winner is declared and the list of players
      is shown in order of highest score to lowest.

The above shows the experience of a game from the perspective of a player.
 But in terns of host/player communications and events, it is:
1 ) -
2 ) Someone enters settings into the host config page
3 ) each player sends their name to host
4 ) -
5 )  host sends the question for the round to each player
6 )  player sends their lie to the host
7 )  host sends each player the ordered list of possible answers (the true answer
      and the lie-answers)
8 )  each player sends the host their guess (an index [0-3?]) as indexed by the 
      provided list
9 ) The host sends the index for the correct answer, the score winnings for the
     round and the running tallies of all the players' scores as of the latest
     guess.  Also send to the player are the list of player names who picked THEIR lie
10) After the last round, the host the host sends the list on player names and the
     final score for each player.  The winner is inferred by the top score.

The following functions in script should exist to trigger these messages and game
 transitions:

 function hostChoseName(name)
 function hostChoseSettings(settings)
 function playerJoinGame(playername, hostname)
 function hostBroadcastsANewPlayerHasJoined(playerInfo) //playerInfo includes their name and avitar
 function playerTellsHostToBeginNow()  // They don't care to wait for more players
 function hostBroadcastsToPlayersThatTheGameHasBegun(gameinfo) // gameinfo includes how many rounds, the difficulty, and anything else we want to throw in there
 function hostBeginsNewRound(roundNumber, totalNumberOfRounds, questionText)
 function playerSubmitsLie(lieText)
 function hostBroadcastsThePossibleAnswers(answers)
 function playerSubmitsGuess(n)
 function hostSendsScoreWinningsAndRunningTallyToPlayer(correctAnswerIndex, roundScore, runningTally)
 function hostSendsFinalScores()

But we're adapting this scheme to single-machine-multiplayer so as to 
allow the peer networking portion to be an optional component.

A single-machine-multi game would basically work as above with a relatively minor
modification and that is that a host doesn't need to choose a name since all the 
local players will be running from the same browser which will also play as the host
to ALL the players.  But now we gotta go through a series of steps where EACH player
gets turns at the keyboard.  The game would need to begin with EACH player entering
their name and choosing an avitar (or getting one assigned to them however we choose)
Each round would be modified so that we iterate through the players for each of 
the 2 phases (lie and guess) so that each player submits their lie before we go on to
allow each player to submit their guess.

